

import Foundation
import Moya

class HighPrecisionTimingPlugin: PluginType {
    private var startTimes: [String: TimeInterval] = [:]
    
    func willSend(_ request: RequestType, target: TargetType) {
        let key = "\(target.method.rawValue)|\(target.path)|\(target.task)"
        startTimes[key] = ProcessInfo.processInfo.systemUptime
    }
    
    func didReceive(_ result: Result<Response, MoyaError>, target: TargetType) {
        guard case let .success(response) = result else { return }
        
        // Ëé∑ÂèñËØ∑Ê±ÇÂØπË±°
        let key = "\(target.method.rawValue)|\(target.path)|\(target.task)"
        guard let startTime = startTimes[key] else { return }
        
        // ËÆ°ÁÆóËÄóÊó∂ÔºàÊØ´ÁßíÁ∫ßÁ≤æÂ∫¶Ôºâ
        let elapsed = (ProcessInfo.processInfo.systemUptime - startTime) * 1000
        let formattedTime = String(format: "%.3f", elapsed)
        
        // Ëé∑ÂèñËØ∑Ê±Ç‰ø°ÊÅØ
        let statusCode = response.statusCode
        let method = target.method.rawValue
        let path = target.path
        
        // Ê†ºÂºèÂåñËæìÂá∫
        let logMessage = """
        üåê ÁΩëÁªúËØ∑Ê±ÇÁªüËÆ°
        URL: \(path)
        ÊñπÊ≥ï: \(method)
        Áä∂ÊÄÅÁ†Å: \(statusCode)
        ËÄóÊó∂: \(formattedTime)ms
        """
        
        printl(message: logMessage)
        
        // ËÄóÊó∂Ë≠¶Âëä(ÂèØÈÖçÁΩÆ)
        let warningThreshold: Double = 500 // 500msË≠¶ÂëäÈòàÂÄº
        if elapsed > warningThreshold {
            printl(message: "‚ö†Ô∏è Ë≠¶Âëä: ËØ∑Ê±ÇË∂ÖÊó∂(Ë∂ÖËøá\(warningThreshold)ms)")
        }
        
        // Ê∏ÖÁêÜËÆ∞ÂΩï
        startTimes.removeValue(forKey: key)
        
        let cacheKey: String = "HighPrecisionTimingPlugin"
        if let dic: [String: Double] = CacheHelper.default.object(forkey: cacheKey) {
            var newDic = dic
            newDic[key] = elapsed
            CacheHelper.default.set(newDic, forkey: cacheKey)
        } else {
            var dic: [String: Double] = [:]
            dic[key] = elapsed
            CacheHelper.default.set(dic, forkey: cacheKey)
        }
    }
}
